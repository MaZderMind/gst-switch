        -:    0:Source:gstcase.c
        -:    0:Programs:7
        -:    1:/* GstSwitch
        -:    2: * Copyright (C) 2012,2013 Duzy Chan <code@duzy.info>
        -:    3: *
        -:    4: * Redistribution and use in source and binary forms, with or without
        -:    5: * modification, are permitted provided that the following conditions
        -:    6: * are met:
        -:    7: * 1. Redistributions of source code must retain the above copyright
        -:    8: *    notice, this list of conditions and the following disclaimer.
        -:    9: * 2. Redistributions in binary form must reproduce the above copyright
        -:   10: *    notice, this list of conditions and the following disclaimer in the
        -:   11: *    documentation and/or other materials provided with the distribution.
        -:   12: *
        -:   13: * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
        -:   14: * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   15: * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   16: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
        -:   17: * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   18: * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        -:   19: * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   20: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   21: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
        -:   22: * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
        -:   23: * POSSIBILITY OF SUCH DAMAGE.
        -:   24: */
        -:   25:
        -:   26:/*! @file */
        -:   27:
        -:   28:#ifdef HAVE_CONFIG_H
        -:   29:#include "config.h"
        -:   30:#endif
        -:   31:
        -:   32:#include <stdlib.h>
        -:   33:#include <string.h>
        -:   34:#include "gstswitchserver.h"
        -:   35:#include "gstcase.h"
        -:   36:
        -:   37:enum
        -:   38:{
        -:   39:  PROP_0,
        -:   40:  PROP_TYPE,
        -:   41:  PROP_SERVE,
        -:   42:  PROP_STREAM,
        -:   43:  PROP_INPUT,
        -:   44:  PROP_BRANCH,
        -:   45:  PROP_PORT,
        -:   46:  PROP_WIDTH,
        -:   47:  PROP_HEIGHT,
        -:   48:  PROP_A_WIDTH,
        -:   49:  PROP_A_HEIGHT,
        -:   50:  PROP_B_WIDTH,
        -:   51:  PROP_B_HEIGHT,
        -:   52:};
        -:   53:
        -:   54:enum
        -:   55:{
        -:   56:  SIGNAL__LAST,
        -:   57:};
        -:   58:
        -:   59://static guint gst_case_signals[SIGNAL__LAST] = { 0 };
        -:   60:extern gboolean verbose;
        -:   61:
        -:   62:#define gst_case_parent_class parent_class
    #####:   63:G_DEFINE_TYPE (GstCase, gst_case, GST_TYPE_WORKER);
        -:   64:
        -:   65:/**
        -:   66: * @param cas The GstCase instance.
        -:   67: * @memberof GstCase
        -:   68: *
        -:   69: * Initialize the GstCase instance.
        -:   70: *
        -:   71: * @see GObject
        -:   72: */
        -:   73:static void
    #####:   74:gst_case_init (GstCase * cas)
        -:   75:{
    #####:   76:  cas->type = GST_CASE_UNKNOWN;
    #####:   77:  cas->stream = NULL;
    #####:   78:  cas->input = NULL;
    #####:   79:  cas->branch = NULL;
    #####:   80:  cas->serve_type = GST_SERVE_NOTHING;
    #####:   81:  cas->sink_port = 0;
    #####:   82:  cas->width = 0;
    #####:   83:  cas->height = 0;
    #####:   84:  cas->a_width = 0;
    #####:   85:  cas->a_height = 0;
    #####:   86:  cas->b_width = 0;
    #####:   87:  cas->b_height = 0;
        -:   88:
        -:   89:  //INFO ("init %p", cas);
    #####:   90:}
        -:   91:
        -:   92:/**
        -:   93: * @param cas The GstCase instance.
        -:   94: * @memberof GstCase
        -:   95: *
        -:   96: * Disposing from it's parent object.
        -:   97: *
        -:   98: * @see GObject
        -:   99: */
        -:  100:static void
    #####:  101:gst_case_dispose (GstCase * cas)
        -:  102:{
    #####:  103:  if (cas->stream) {
        -:  104:#if 0
        -:  105:    GError *error = NULL;
        -:  106:    g_input_stream_close (cas->stream, NULL, &error);
        -:  107:    if (error) {
        -:  108:      ERROR ("%s", error->message);
        -:  109:    }
        -:  110:#endif
    #####:  111:    g_object_unref (cas->stream);
    #####:  112:    cas->stream = NULL;
        -:  113:  }
        -:  114:
    #####:  115:  if (cas->input) {
    #####:  116:    g_object_unref (cas->input);
    #####:  117:    cas->input = NULL;
        -:  118:  }
        -:  119:
    #####:  120:  if (cas->branch) {
    #####:  121:    g_object_unref (cas->branch);
    #####:  122:    cas->branch = NULL;
        -:  123:  }
        -:  124:  //INFO ("dispose %p", cas);
    #####:  125:  G_OBJECT_CLASS (parent_class)->dispose (G_OBJECT (cas));
    #####:  126:}
        -:  127:
        -:  128:/**
        -:  129: * @param cas The GstCase instance.
        -:  130: * @memberof GstCase
        -:  131: *
        -:  132: * Destroying the GstCase instance.
        -:  133: *
        -:  134: * @see GObject
        -:  135: */
        -:  136:static void
    #####:  137:gst_case_finalize (GstCase * cas)
        -:  138:{
    #####:  139:  if (G_OBJECT_CLASS (parent_class)->finalize)
    #####:  140:    (*G_OBJECT_CLASS (parent_class)->finalize) (G_OBJECT (cas));
    #####:  141:}
        -:  142:
        -:  143:/**
        -:  144: * @param cas The GstCase instance.
        -:  145: * @param property_id
        -:  146: * @param value
        -:  147: * @param pspec
        -:  148: * @memberof GstCase
        -:  149: *
        -:  150: * Getting GstCase property.
        -:  151: *
        -:  152: * @see GObject
        -:  153: */
        -:  154:static void
    #####:  155:gst_case_get_property (GstCase * cas, guint property_id,
        -:  156:    GValue * value, GParamSpec * pspec)
        -:  157:{
    #####:  158:  switch (property_id) {
        -:  159:    case PROP_TYPE:
    #####:  160:      g_value_set_uint (value, cas->type);
    #####:  161:      break;
        -:  162:    case PROP_SERVE:
    #####:  163:      g_value_set_uint (value, cas->serve_type);
    #####:  164:      break;
        -:  165:    case PROP_STREAM:
    #####:  166:      g_value_set_object (value, cas->stream);
    #####:  167:      break;
        -:  168:    case PROP_INPUT:
    #####:  169:      g_value_set_object (value, cas->input);
    #####:  170:      break;
        -:  171:    case PROP_BRANCH:
    #####:  172:      g_value_set_object (value, cas->branch);
    #####:  173:      break;
        -:  174:    case PROP_PORT:
    #####:  175:      g_value_set_uint (value, cas->sink_port);
    #####:  176:      break;
        -:  177:    case PROP_WIDTH:
    #####:  178:      g_value_set_uint (value, cas->width);
    #####:  179:      break;
        -:  180:    case PROP_HEIGHT:
    #####:  181:      g_value_set_uint (value, cas->height);
    #####:  182:      break;
        -:  183:    case PROP_A_WIDTH:
    #####:  184:      g_value_set_uint (value, cas->a_width);
    #####:  185:      break;
        -:  186:    case PROP_A_HEIGHT:
    #####:  187:      g_value_set_uint (value, cas->a_height);
    #####:  188:      break;
        -:  189:    case PROP_B_WIDTH:
    #####:  190:      g_value_set_uint (value, cas->b_width);
    #####:  191:      break;
        -:  192:    case PROP_B_HEIGHT:
    #####:  193:      g_value_set_uint (value, cas->b_height);
    #####:  194:      break;
        -:  195:    default:
    #####:  196:      G_OBJECT_WARN_INVALID_PROPERTY_ID (cas, property_id, pspec);
    #####:  197:      break;
        -:  198:  }
    #####:  199:}
        -:  200:
        -:  201:/**
        -:  202: * @param cas The GstCase instance.
        -:  203: * @param property_id
        -:  204: * @param value
        -:  205: * @param pspec
        -:  206: * @memberof GstCase
        -:  207: *
        -:  208: * Setting GstCase property.
        -:  209: *
        -:  210: * @see GObject
        -:  211: */
        -:  212:static void
    #####:  213:gst_case_set_property (GstCase * cas, guint property_id,
        -:  214:    const GValue * value, GParamSpec * pspec)
        -:  215:{
    #####:  216:  switch (property_id) {
        -:  217:    case PROP_TYPE:
    #####:  218:      cas->type = (GstCaseType) g_value_get_uint (value);
    #####:  219:      break;
        -:  220:    case PROP_SERVE:
    #####:  221:      cas->serve_type = (GstSwitchServeStreamType) g_value_get_uint (value);
    #####:  222:      break;
        -:  223:    case PROP_STREAM:
        -:  224:    {
    #####:  225:      GObject *stream = g_value_dup_object (value);
    #####:  226:      if (cas->stream)
    #####:  227:        g_object_unref (cas->stream);
    #####:  228:      cas->stream = G_INPUT_STREAM (stream);
        -:  229:    }
    #####:  230:      break;
        -:  231:    case PROP_INPUT:
        -:  232:    {
    #####:  233:      GObject *input = g_value_dup_object (value);
    #####:  234:      if (cas->input)
    #####:  235:        g_object_unref (cas->input);
    #####:  236:      cas->input = GST_CASE (input);
        -:  237:    }
    #####:  238:      break;
        -:  239:    case PROP_BRANCH:
        -:  240:    {
    #####:  241:      GObject *branch = g_value_dup_object (value);
    #####:  242:      if (cas->branch)
    #####:  243:        g_object_unref (cas->branch);
    #####:  244:      cas->branch = GST_CASE (branch);
        -:  245:    }
    #####:  246:      break;
        -:  247:    case PROP_PORT:
    #####:  248:      cas->sink_port = g_value_get_uint (value);
    #####:  249:      break;
        -:  250:    case PROP_WIDTH:
    #####:  251:      cas->width = g_value_get_uint (value);
    #####:  252:      break;
        -:  253:    case PROP_HEIGHT:
    #####:  254:      cas->height = g_value_get_uint (value);
    #####:  255:      break;
        -:  256:    case PROP_A_WIDTH:
    #####:  257:      cas->a_width = g_value_get_uint (value);
    #####:  258:      break;
        -:  259:    case PROP_A_HEIGHT:
    #####:  260:      cas->a_height = g_value_get_uint (value);
    #####:  261:      break;
        -:  262:    case PROP_B_WIDTH:
    #####:  263:      cas->b_width = g_value_get_uint (value);
    #####:  264:      break;
        -:  265:    case PROP_B_HEIGHT:
    #####:  266:      cas->b_height = g_value_get_uint (value);
    #####:  267:      break;
        -:  268:    default:
    #####:  269:      G_OBJECT_WARN_INVALID_PROPERTY_ID (G_OBJECT (cas), property_id, pspec);
    #####:  270:      break;
        -:  271:  }
    #####:  272:}
        -:  273:
        -:  274:/**
        -:  275: * @param cas The GstCase instance.
        -:  276: * @memberof GstCase
        -:  277: * @return A GString instance representing the pipeline string.
        -:  278: *
        -:  279: * Retreiving the GstCase pipeline string, it's invoked by GstWorker.
        -:  280: */
        -:  281:static GString *
    #####:  282:gst_case_get_pipeline_string (GstCase * cas)
        -:  283:{
        -:  284:  GString *desc;
    #####:  285:  gchar *channel = NULL;
    #####:  286:  gchar *caps = NULL;
    #####:  287:  gchar *scale = NULL;
    #####:  288:  gchar *srctype = NULL;
    #####:  289:  gchar *sink = NULL;
        -:  290:
    #####:  291:  desc = g_string_new ("");
        -:  292:
    #####:  293:  switch (cas->type) {
        -:  294:    case GST_CASE_INPUT_a:
        -:  295:    case GST_CASE_INPUT_v:
    #####:  296:      g_string_append_printf (desc, "giostreamsrc name=source ");
    #####:  297:      break;
        -:  298:    case GST_CASE_COMPOSITE_A:
        -:  299:    case GST_CASE_COMPOSITE_B:
        -:  300:    case GST_CASE_COMPOSITE_a:
        -:  301:    case GST_CASE_PREVIEW:
    #####:  302:      if (srctype == NULL)
    #####:  303:        srctype = "input";
        -:  304:    case GST_CASE_BRANCH_A:
        -:  305:    case GST_CASE_BRANCH_B:
        -:  306:    case GST_CASE_BRANCH_a:
        -:  307:    case GST_CASE_BRANCH_p:
    #####:  308:      if (srctype == NULL)
    #####:  309:        srctype = "branch";
    #####:  310:      if (cas->serve_type == GST_SERVE_AUDIO_STREAM) {
    #####:  311:        g_string_append_printf (desc, "interaudiosrc");
        -:  312:      } else {
    #####:  313:        g_string_append_printf (desc, "intervideosrc");
        -:  314:      }
    #####:  315:      g_string_append_printf (desc, " name=source channel=%s_%d ",
        -:  316:          srctype, cas->sink_port);
    #####:  317:      break;
        -:  318:    default:
    #####:  319:      ERROR ("unknown case %d", cas->type);
    #####:  320:      break;
        -:  321:  }
        -:  322:
    #####:  323:  srctype = NULL;
        -:  324:
    #####:  325:  switch (cas->type) {
        -:  326:    case GST_CASE_COMPOSITE_A:
    #####:  327:      if (channel == NULL)
    #####:  328:        channel = "a";
    #####:  329:      if (scale == NULL)
    #####:  330:        scale =
    #####:  331:            g_strdup_printf ("videoscale ! video/x-raw,width=%d,height=%d",
        -:  332:            cas->a_width, cas->a_height);
        -:  333:    case GST_CASE_COMPOSITE_B:
    #####:  334:      if (channel == NULL)
    #####:  335:        channel = "b";
    #####:  336:      if (scale == NULL)
    #####:  337:        scale =
    #####:  338:            g_strdup_printf ("videoscale ! video/x-raw,width=%d,height=%d",
        -:  339:            cas->b_width, cas->b_height);
    #####:  340:      caps =
    #####:  341:          g_strdup_printf ("video/x-raw,width=%d,height=%d", cas->width,
        -:  342:          cas->height);
    #####:  343:      sink = "intervideosink";
        -:  344:    case GST_CASE_COMPOSITE_a:
    #####:  345:      if (channel == NULL)
    #####:  346:        channel = "audio";
    #####:  347:      if (sink == NULL)
    #####:  348:        sink = "interaudiosink";
    #####:  349:      g_string_append_printf (desc, "source. ");
        -:  350:      /*
        -:  351:         ASSESS ("assess-composite-%s-source-%d", channel, cas->sink_port);
        -:  352:       */
    #####:  353:      if (caps)
    #####:  354:        g_string_append_printf (desc, "! %s ", caps);
    #####:  355:      g_string_append_printf (desc, "! tee name=s ");
    #####:  356:      g_string_append_printf (desc, "s. ! queue2 ");
        -:  357:      /*
        -:  358:         ASSESS ("assess-composite-%s-branch-%d", channel, cas->sink_port);
        -:  359:       */
    #####:  360:      g_string_append_printf (desc, "! %s name=sink1 channel=branch_%d ",
        -:  361:          sink, cas->sink_port);
    #####:  362:      g_string_append_printf (desc, "s. ! queue2 ");
        -:  363:      if (scale) {
        -:  364:        /*
        -:  365:           g_string_append_printf (desc, "! %s", scale);
        -:  366:         */
        -:  367:      }
        -:  368:      ASSESS ("assess-composite-%s-compose-%d", channel, cas->sink_port);
    #####:  369:      g_string_append_printf (desc, "! %s name=sink2 channel=composite_%s ",
        -:  370:          sink, channel);
    #####:  371:      if (scale)
    #####:  372:        g_free (scale), scale = NULL;
    #####:  373:      if (caps)
    #####:  374:        g_free (caps), caps = NULL;
    #####:  375:      break;
        -:  376:    case GST_CASE_PREVIEW:
    #####:  377:      if (srctype == NULL)
    #####:  378:        srctype = "branch";
        -:  379:    case GST_CASE_INPUT_a:
        -:  380:    case GST_CASE_INPUT_v:
    #####:  381:      if (srctype == NULL)
    #####:  382:        srctype = "input";
    #####:  383:      if (cas->serve_type == GST_SERVE_AUDIO_STREAM) {
    #####:  384:        g_string_append_printf (desc, "interaudiosink");
        -:  385:      } else {
    #####:  386:        g_string_append_printf (desc, "intervideosink");
        -:  387:      }
    #####:  388:      g_string_append_printf (desc, " name=sink channel=%s_%d ",
        -:  389:          srctype, cas->sink_port);
        -:  390:
    #####:  391:      if (cas->serve_type == GST_SERVE_AUDIO_STREAM) {
    #####:  392:        g_string_append_printf (desc, "source. ");
        -:  393:        /*
        -:  394:           if (cas->type == GST_CASE_PREVIEW)
        -:  395:           ASSESS ("assess-audio-preview-%d", cas->sink_port);
        -:  396:           else 
        -:  397:           ASSESS ("assess-audio-input-%d", cas->sink_port);
        -:  398:         */
        -:  399:        //g_string_append_printf (desc, "! gdpdepay ");
    #####:  400:        g_string_append_printf (desc, "! sink. ");
    #####:  401:      } else if (cas->type == GST_CASE_PREVIEW) {
    #####:  402:        g_string_append_printf (desc, "source. " "! video/x-raw,width=%d,height=%d ", cas->width, cas->height); //cas->a_width, cas->a_height);
        -:  403:        /*
        -:  404:           ASSESS ("assess-video-preview-%d", cas->sink_port);
        -:  405:         */
    #####:  406:        g_string_append_printf (desc, "! sink. ");
        -:  407:      } else {
    #####:  408:        g_string_append_printf (desc, "source. ");
        -:  409:        ASSESS ("assess-video-input-%d", cas->sink_port);
    #####:  410:        g_string_append_printf (desc, "! gdpdepay ! sink. ");
        -:  411:      }
    #####:  412:      break;
        -:  413:    case GST_CASE_BRANCH_A:
        -:  414:    case GST_CASE_BRANCH_B:
        -:  415:    case GST_CASE_BRANCH_a:
        -:  416:    case GST_CASE_BRANCH_p:
    #####:  417:      g_string_append_printf (desc, "tcpserversink name=sink port=%d ",
        -:  418:          cas->sink_port);
    #####:  419:      g_string_append_printf (desc, "source. ");
    #####:  420:      if (cas->serve_type == GST_SERVE_AUDIO_STREAM) {
        -:  421:        /*
        -:  422:           ASSESS ("assess-branch-source-%d", cas->sink_port);
        -:  423:         */
    #####:  424:        g_string_append_printf (desc, "! faac ");
        -:  425:        /*
        -:  426:           ASSESS ("assess-branch-audio-encoded-%d", cas->sink_port);
        -:  427:         */
        -:  428:      } else {
    #####:  429:        g_string_append_printf (desc, "! video/x-raw,width=%d,height=%d ", cas->width, cas->height);    //cas->a_width, cas->a_height);
        -:  430:        /*
        -:  431:           ASSESS ("assess-branch-source-%d", cas->sink_port);
        -:  432:         */
        -:  433:      }
    #####:  434:      g_string_append_printf (desc, "! gdppay ");
        -:  435:      /*
        -:  436:         ASSESS ("assess-branch-payed-%d", cas->sink_port);
        -:  437:       */
    #####:  438:      g_string_append_printf (desc, "! sink. ");
    #####:  439:      break;
        -:  440:    case GST_CASE_UNKNOWN:
    #####:  441:      ERROR ("unknown case (%d)", cas->type);
    #####:  442:      break;
        -:  443:  }
        -:  444:
    #####:  445:  return desc;
        -:  446:}
        -:  447:
        -:  448:/**
        -:  449: * @param element
        -:  450: * @param socket
        -:  451: * @param cas The GstCase instance.
        -:  452: * @memberof GstCase
        -:  453: *
        -:  454: * Invoked when a client socket is added.
        -:  455: */
        -:  456:static void
    #####:  457:gst_case_client_socket_added (GstElement * element,
        -:  458:    GSocket * socket, GstCase * cas)
        -:  459:{
    #####:  460:  g_return_if_fail (G_IS_SOCKET (socket));
        -:  461:
        -:  462:  //INFO ("client-socket-added: %d", g_socket_get_fd (socket));
        -:  463:}
        -:  464:
        -:  465:/**
        -:  466: * @param element
        -:  467: * @param socket
        -:  468: * @param cas The GstCase instance.
        -:  469: * @memberof GstCase
        -:  470: *
        -:  471: * Invoked when a client socket is removed.
        -:  472: */
        -:  473:static void
    #####:  474:gst_case_client_socket_removed (GstElement * element,
        -:  475:    GSocket * socket, GstCase * cas)
        -:  476:{
    #####:  477:  g_return_if_fail (G_IS_SOCKET (socket));
        -:  478:
        -:  479:  //INFO ("client-socket-removed: %d", g_socket_get_fd (socket));
        -:  480:
    #####:  481:  g_socket_close (socket, NULL);
        -:  482:}
        -:  483:
        -:  484:/**
        -:  485: * @param cas The GstCase instance.
        -:  486: * @memberof GstCase
        -:  487: *
        -:  488: * Invoked by GstWorker when preparing the pipeline.
        -:  489: */
        -:  490:static gboolean
    #####:  491:gst_case_prepare (GstCase * cas)
        -:  492:{
    #####:  493:  GstWorker *worker = GST_WORKER (cas);
    #####:  494:  GstElement *source = NULL;
    #####:  495:  switch (cas->type) {
        -:  496:    case GST_CASE_INPUT_a:
        -:  497:    case GST_CASE_INPUT_v:
    #####:  498:      if (!cas->stream) {
    #####:  499:        ERROR ("no stream for new case");
    #####:  500:        return FALSE;
        -:  501:      }
    #####:  502:      source = gst_worker_get_element_unlocked (worker, "source");
    #####:  503:      if (!source) {
    #####:  504:        ERROR ("no source");
    #####:  505:        return FALSE;
        -:  506:      }
    #####:  507:      g_object_set (source, "stream", cas->stream, NULL);
    #####:  508:      gst_object_unref (source);
    #####:  509:      break;
        -:  510:
        -:  511:    case GST_CASE_BRANCH_A:
        -:  512:    case GST_CASE_BRANCH_B:
        -:  513:    case GST_CASE_BRANCH_a:
        -:  514:    case GST_CASE_BRANCH_p:
        -:  515:    {
    #####:  516:      GstElement *sink = gst_worker_get_element_unlocked (worker, "sink");
        -:  517:
    #####:  518:      g_return_val_if_fail (GST_IS_ELEMENT (sink), FALSE);
        -:  519:
    #####:  520:      g_signal_connect (sink, "client-added",
        -:  521:          G_CALLBACK (gst_case_client_socket_added), cas);
        -:  522:
    #####:  523:      g_signal_connect (sink, "client-socket-removed",
        -:  524:          G_CALLBACK (gst_case_client_socket_removed), cas);
        -:  525:    }
    #####:  526:      break;
        -:  527:
        -:  528:    default:
    #####:  529:      break;
        -:  530:  }
        -:  531:
    #####:  532:  return TRUE;
        -:  533:}
        -:  534:
        -:  535:/**
        -:  536: * @brief Initialize GstCaseClass.
        -:  537: * @param klass The GstCaseClass instance.
        -:  538: * @memberof GstCaseClass
        -:  539: */
        -:  540:static void
    #####:  541:gst_case_class_init (GstCaseClass * klass)
        -:  542:{
    #####:  543:  GObjectClass *object_class = G_OBJECT_CLASS (klass);
    #####:  544:  GstWorkerClass *worker_class = GST_WORKER_CLASS (klass);
        -:  545:
    #####:  546:  object_class->dispose = (GObjectFinalizeFunc) gst_case_dispose;
    #####:  547:  object_class->finalize = (GObjectFinalizeFunc) gst_case_finalize;
    #####:  548:  object_class->set_property = (GObjectSetPropertyFunc) gst_case_set_property;
    #####:  549:  object_class->get_property = (GObjectGetPropertyFunc) gst_case_get_property;
        -:  550:
    #####:  551:  g_object_class_install_property (object_class, PROP_TYPE,
        -:  552:      g_param_spec_uint ("type", "Type",
        -:  553:          "Case type",
        -:  554:          GST_CASE_UNKNOWN,
        -:  555:          GST_CASE__LAST_TYPE,
        -:  556:          GST_CASE_UNKNOWN, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
        -:  557:
    #####:  558:  g_object_class_install_property (object_class, PROP_SERVE,
        -:  559:      g_param_spec_uint ("serve", "Serve",
        -:  560:          "Serve type",
        -:  561:          GST_SERVE_NOTHING,
        -:  562:          GST_SERVE_AUDIO_STREAM,
        -:  563:          GST_SERVE_NOTHING, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
        -:  564:
    #####:  565:  g_object_class_install_property (object_class, PROP_STREAM,
        -:  566:      g_param_spec_object ("stream", "Stream",
        -:  567:          "Stream to read from",
        -:  568:          G_TYPE_INPUT_STREAM, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
        -:  569:
    #####:  570:  g_object_class_install_property (object_class, PROP_INPUT,
        -:  571:      g_param_spec_object ("input", "Input",
        -:  572:          "The input of the case",
        -:  573:          GST_TYPE_CASE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
        -:  574:
    #####:  575:  g_object_class_install_property (object_class, PROP_BRANCH,
        -:  576:      g_param_spec_object ("branch", "Branch",
        -:  577:          "The branch of the case",
        -:  578:          GST_TYPE_CASE, G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
        -:  579:
    #####:  580:  g_object_class_install_property (object_class, PROP_PORT,
        -:  581:      g_param_spec_uint ("port", "Port",
        -:  582:          "Sink port",
        -:  583:          GST_SWITCH_MIN_SINK_PORT,
        -:  584:          GST_SWITCH_MAX_SINK_PORT,
        -:  585:          GST_SWITCH_MIN_SINK_PORT,
        -:  586:          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
        -:  587:
    #####:  588:  g_object_class_install_property (object_class, PROP_WIDTH,
        -:  589:      g_param_spec_uint ("width", "Width",
        -:  590:          "Output width", 1,
        -:  591:          G_MAXINT,
        -:  592:          GST_SWITCH_COMPOSITE_DEFAULT_WIDTH,
        -:  593:          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
        -:  594:
    #####:  595:  g_object_class_install_property (object_class, PROP_HEIGHT,
        -:  596:      g_param_spec_uint ("height", "Height",
        -:  597:          "Output height", 1,
        -:  598:          G_MAXINT,
        -:  599:          GST_SWITCH_COMPOSITE_DEFAULT_HEIGHT,
        -:  600:          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
        -:  601:
    #####:  602:  g_object_class_install_property (object_class, PROP_A_WIDTH,
        -:  603:      g_param_spec_uint ("awidth", "A Width",
        -:  604:          "Channel A width", 1,
        -:  605:          G_MAXINT,
        -:  606:          GST_SWITCH_COMPOSITE_DEFAULT_WIDTH,
        -:  607:          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
        -:  608:
    #####:  609:  g_object_class_install_property (object_class, PROP_A_HEIGHT,
        -:  610:      g_param_spec_uint ("aheight", "A Height",
        -:  611:          "Channel A height", 1,
        -:  612:          G_MAXINT,
        -:  613:          GST_SWITCH_COMPOSITE_DEFAULT_HEIGHT,
        -:  614:          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
        -:  615:
    #####:  616:  g_object_class_install_property (object_class, PROP_B_WIDTH,
        -:  617:      g_param_spec_uint ("bwidth", "B Width",
        -:  618:          "Channel B width", 1,
        -:  619:          G_MAXINT,
        -:  620:          GST_SWITCH_COMPOSITE_DEFAULT_WIDTH,
        -:  621:          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
        -:  622:
    #####:  623:  g_object_class_install_property (object_class, PROP_B_HEIGHT,
        -:  624:      g_param_spec_uint ("bheight", "B Height",
        -:  625:          "Channel B height", 1,
        -:  626:          G_MAXINT,
        -:  627:          GST_SWITCH_COMPOSITE_DEFAULT_HEIGHT,
        -:  628:          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
        -:  629:
    #####:  630:  worker_class->prepare = (GstWorkerPrepareFunc) gst_case_prepare;
    #####:  631:  worker_class->get_pipeline_string = (GstWorkerGetPipelineStringFunc)
        -:  632:      gst_case_get_pipeline_string;
    #####:  633:}
