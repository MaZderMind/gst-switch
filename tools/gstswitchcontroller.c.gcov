        -:    0:Source:gstswitchcontroller.c
        -:    0:Programs:7
        -:    1:/* GstSwitch
        -:    2: * Copyright (C) 2013 Duzy Chan <code@duzy.info>
        -:    3: *
        -:    4: * Redistribution and use in source and binary forms, with or without
        -:    5: * modification, are permitted provided that the following conditions
        -:    6: * are met:
        -:    7: * 1. Redistributions of source code must retain the above copyright
        -:    8: *    notice, this list of conditions and the following disclaimer.
        -:    9: * 2. Redistributions in binary form must reproduce the above copyright
        -:   10: *    notice, this list of conditions and the following disclaimer in the
        -:   11: *    documentation and/or other materials provided with the distribution.
        -:   12: *
        -:   13: * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
        -:   14: * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        -:   15: * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   16: * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
        -:   17: * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        -:   18: * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        -:   19: * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
        -:   20: * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
        -:   21: * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
        -:   22: * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
        -:   23: * POSSIBILITY OF SUCH DAMAGE.
        -:   24: */
        -:   25:
        -:   26:/*! @file */
        -:   27:
        -:   28:#ifdef HAVE_CONFIG_H
        -:   29:#include "config.h"
        -:   30:#endif
        -:   31:
        -:   32:#include "gstswitchcontroller.h"
        -:   33:#include "gstswitchserver.h"
        -:   34:#include "gstswitchclient.h"
        -:   35:
        -:   36:#define GST_SWITCH_CONTROLLER_LOCK_UIS(c) (g_mutex_lock (&(c)->uis_lock))
        -:   37:#define GST_SWITCH_CONTROLLER_UNLOCK_UIS(c) (g_mutex_unlock (&(c)->uis_lock))
        -:   38:#define GST_SWITCH_CONTROLLER_LOCK_CAPTURES(c) (g_mutex_lock (&(c)->captures_lock))
        -:   39:#define GST_SWITCH_CONTROLLER_UNLOCK_CAPTURES(c) (g_mutex_unlock (&(c)->captures_lock))
        -:   40:
        -:   41:enum
        -:   42:{
        -:   43:  PROP_0,
        -:   44:};
        -:   45:
    #####:   46:G_DEFINE_TYPE (GstSwitchController, gst_switch_controller, G_TYPE_OBJECT);
        -:   47:
        -:   48:static GDBusNodeInfo *introspection_data = NULL;
        -:   49:static const gchar introspection_xml[] =
        -:   50:    "<node>" "  <interface name='" SWITCH_CONTROLLER_OBJECT_NAME "'>"
        -:   51:    "    <method name='get_compose_port'>"
        -:   52:    "      <arg type='i' name='port' direction='out'/>"
        -:   53:    "    </method>"
        -:   54:    "    <method name='get_encode_port'>"
        -:   55:    "      <arg type='i' name='port' direction='out'/>"
        -:   56:    "    </method>"
        -:   57:    "    <method name='get_audio_port'>"
        -:   58:    "      <arg type='i' name='port' direction='out'/>"
        -:   59:    "    </method>"
        -:   60:    "    <method name='get_preview_ports'>"
        -:   61:    "      <arg type='s' name='ports' direction='out'/>"
        -:   62:    "    </method>"
        -:   63:    "    <method name='set_composite_mode'>"
        -:   64:    "      <arg type='i' name='channel' direction='in'/>"
        -:   65:    "      <arg type='b' name='result' direction='out'/>"
        -:   66:    "    </method>"
        -:   67:    "    <method name='set_encode_mode'>"
        -:   68:    "      <arg type='i' name='channel' direction='in'/>"
        -:   69:    "      <arg type='b' name='result' direction='out'/>"
        -:   70:    "    </method>"
        -:   71:    "    <method name='new_record'>"
        -:   72:    "      <arg type='b' name='result' direction='out'/>"
        -:   73:    "    </method>"
        -:   74:    "    <method name='adjust_pip'>"
        -:   75:    "      <arg type='i' name='dx' direction='in'/>"
        -:   76:    "      <arg type='i' name='dy' direction='in'/>"
        -:   77:    "      <arg type='i' name='dw' direction='in'/>"
        -:   78:    "      <arg type='i' name='dh' direction='in'/>"
        -:   79:    "      <arg type='u' name='result' direction='out'/>"
        -:   80:    "    </method>"
        -:   81:    "    <method name='switch'>"
        -:   82:    "      <arg type='i' name='channel' direction='in'/>"
        -:   83:    "      <arg type='i' name='port' direction='in'/>"
        -:   84:    "      <arg type='b' name='result' direction='out'/>"
        -:   85:    "    </method>"
        -:   86:    "    <method name='click_video'>"
        -:   87:    "      <arg type='i' name='x' direction='in'/>"
        -:   88:    "      <arg type='i' name='y' direction='in'/>"
        -:   89:    "      <arg type='i' name='fw' direction='in'/>"
        -:   90:    "      <arg type='i' name='fh' direction='in'/>"
        -:   91:    "      <arg type='b' name='result' direction='out'/>"
        -:   92:    "    </method>"
        -:   93:    "    <method name='mark_face'>"
        -:   94:    "      <arg type='a(iiii)' name='faces' direction='in'/>"
        -:   95:    "    </method>"
        -:   96:    "    <method name='mark_tracking'>"
        -:   97:    "      <arg type='a(iiii)' name='faces' direction='in'/>"
        -:   98:    "    </method>"
        -:   99:    "    <signal name='audio_port'>"
        -:  100:    "      <arg type='i' name='port'/>"
        -:  101:    "    </signal>"
        -:  102:    "    <signal name='compose_port'>"
        -:  103:    "      <arg type='i' name='port'/>"
        -:  104:    "    </signal>"
        -:  105:    "    <signal name='encode_port'>"
        -:  106:    "      <arg type='i' name='port'/>"
        -:  107:    "    </signal>"
        -:  108:    "    <signal name='preview_port'>"
        -:  109:    "      <arg type='i' name='port'/>"
        -:  110:    "      <arg type='i' name='serve'/>"
        -:  111:    "      <arg type='i' name='type'/>"
        -:  112:    "    </signal>" "  </interface>" "</node>";
        -:  113:/*
        -:  114:  "    <property type='s' name='Name' access='readwrite'/>"
        -:  115:  "    <property type='i' name='Num' access='read'/>"
        -:  116:*/
        -:  117:
        -:  118:/**
        -:  119: * @brief Helper function for matching remoting method names.
        -:  120: * @memberof GstSwitchController
        -:  121: */
        -:  122:static gboolean
    #####:  123:gst_switch_controller_method_match (const gchar * key,
        -:  124:    MethodTableEntry * entry, const gchar * match)
        -:  125:{
    #####:  126:  if (g_strcmp0 (key, match) == 0)
    #####:  127:    return TRUE;
    #####:  128:  return FALSE;
        -:  129:}
        -:  130:
        -:  131:/**
        -:  132: * @brief Performing a remoting method call from a gst-switch client.
        -:  133: * @memberof GstSwitchController
        -:  134: */
        -:  135:static void
    #####:  136:gst_switch_controller_do_method_call (GDBusConnection * connection,
        -:  137:    const gchar * sender,
        -:  138:    const gchar * object_path,
        -:  139:    const gchar * interface_name,
        -:  140:    const gchar * method_name,
        -:  141:    GVariant * parameters,
        -:  142:    GDBusMethodInvocation * invocation, gpointer user_data)
        -:  143:{
    #####:  144:  GstSwitchController *controller = GST_SWITCH_CONTROLLER (user_data);
    #####:  145:  GstSwitchControllerClass *klass =
    #####:  146:      GST_SWITCH_CONTROLLER_CLASS (G_OBJECT_GET_CLASS (controller));
    #####:  147:  MethodFunc entry = (MethodFunc) g_hash_table_find (klass->methods,
        -:  148:      (GHRFunc)
        -:  149:      gst_switch_controller_method_match,
        -:  150:      (gpointer) method_name);
        -:  151:  GVariant *results;
        -:  152:
    #####:  153:  if (!entry)
    #####:  154:    goto error_no_method;
        -:  155:
        -:  156:  /*
        -:  157:     INFO ("calling: %s/%s", interface_name, method_name);
        -:  158:   */
        -:  159:
    #####:  160:  results = (*entry) (G_OBJECT (controller), connection, parameters);
    #####:  161:  g_dbus_method_invocation_return_value (invocation, results);
    #####:  162:  return;
        -:  163:
        -:  164:error_no_method:
        -:  165:  {
    #####:  166:    ERROR ("unsupported method: %s", method_name);
    #####:  167:    g_dbus_method_invocation_return_error (invocation, 0, -1,
        -:  168:        "Unsupported call %s", method_name);
        -:  169:  }
        -:  170:}
        -:  171:
        -:  172:/**
        -:  173: * @brief Fetching the controller property remotely (it's useless currently).
        -:  174: * @memberof GstSwitchController
        -:  175: */
        -:  176:static GVariant *
    #####:  177:gst_switch_controller_do_get_property (GDBusConnection * connection,
        -:  178:    const gchar * sender,
        -:  179:    const gchar * object_path,
        -:  180:    const gchar * interface_name,
        -:  181:    const gchar * property_name, GError ** error, gpointer user_data)
        -:  182:{
    #####:  183:  GstSwitchController *controller = GST_SWITCH_CONTROLLER (user_data);
    #####:  184:  GVariant *ret = NULL;
        -:  185:
        -:  186:  (void) controller;
        -:  187:
    #####:  188:  INFO ("get: %s", property_name);
        -:  189:
    #####:  190:  if (g_strcmp0 (property_name, "num") == 0) {
        -:  191:  }
        -:  192:
    #####:  193:  return ret;
        -:  194:}
        -:  195:
        -:  196:/**
        -:  197: * @brief Setting the property of controller remotely (it's useless currently).
        -:  198: * @memberof GstSwitchController
        -:  199: */
        -:  200:static gboolean
    #####:  201:gst_switch_controller_do_set_property (GDBusConnection * connection,
        -:  202:    const gchar * sender,
        -:  203:    const gchar * object_path,
        -:  204:    const gchar * interface_name,
        -:  205:    const gchar * property_name,
        -:  206:    GVariant * value, GError ** error, gpointer user_data)
        -:  207:{
    #####:  208:  INFO ("set: %s", property_name);
    #####:  209:  return FALSE;
        -:  210:}
        -:  211:
        -:  212:/**
        -:  213: * @brief The remoting virtual table.
        -:  214: * @see GDBusInterfaceVTable.
        -:  215: */
        -:  216:static const GDBusInterfaceVTable gst_switch_controller_interface_vtable = {
        -:  217:  gst_switch_controller_do_method_call,
        -:  218:  gst_switch_controller_do_get_property,
        -:  219:  gst_switch_controller_do_set_property
        -:  220:};
        -:  221:
        -:  222:#if 0
        -:  223:static void
        -:  224:gst_switch_controller_send_property_change (GstSwitchController * controller,
        -:  225:    GParamSpec * pspec, GDBusConnection * connection)
        -:  226:{
        -:  227:  INFO ();
        -:  228:}
        -:  229:
        -:  230:static void
        -:  231:gst_switch_controller_bus_acquired (GDBusConnection * connection,
        -:  232:    const gchar * name, gpointer data)
        -:  233:{
        -:  234:  GstSwitchController *controller = GST_SWITCH_CONTROLLER (data);
        -:  235:  guint register_id;
        -:  236:
        -:  237:  INFO ("bus acquired: %s", name);
        -:  238:
        -:  239:  g_signal_connect (controller, "notify",
        -:  240:      G_CALLBACK (gst_switch_controller_send_property_change), connection);
        -:  241:
        -:  242:  register_id = g_dbus_connection_register_object (connection, SWITCH_CONTROLLER_OBJECT_PATH, introspection_data->interfaces[0], &gst_switch_controller_interface_vtable, controller,   /* user_data */
        -:  243:      NULL,                     /* user_data_free_func */
        -:  244:      NULL /* GError** */ );
        -:  245:
        -:  246:  g_assert (0 < register_id);
        -:  247:}
        -:  248:
        -:  249:static void
        -:  250:gst_switch_controller_name_acquired (GDBusConnection * connection,
        -:  251:    const gchar * name, gpointer data)
        -:  252:{
        -:  253:  INFO ("name acquired: %s", name);
        -:  254:}
        -:  255:
        -:  256:static void
        -:  257:gst_switch_controller_name_lost (GDBusConnection * connection,
        -:  258:    const gchar * name, gpointer data)
        -:  259:{
        -:  260:  INFO ("name lost: %s", name);
        -:  261:}
        -:  262:
        -:  263:static void
        -:  264:gst_switch_controller_export (GstSwitchController * controller)
        -:  265:{
        -:  266:  controller->owner_id = g_bus_own_name (G_BUS_TYPE_SESSION,
        -:  267:      SWITCH_CONTROLLER_OBJECT_NAME,
        -:  268:      G_BUS_NAME_OWNER_FLAGS_NONE,
        -:  269:      gst_switch_controller_bus_acquired,
        -:  270:      gst_switch_controller_name_acquired,
        -:  271:      gst_switch_controller_name_lost, controller, NULL);
        -:  272:
        -:  273:  INFO ("TODO: export");
        -:  274:}
        -:  275:#endif
        -:  276:
        -:  277:/**
        -:  278: * @brief Perform sending remote signals to connected clients.
        -:  279: * @memberof GstSwitchController
        -:  280: */
        -:  281:static void
    #####:  282:gst_switch_controller_emit_ui_signal (GstSwitchController * controller,
        -:  283:    const gchar * signame, GVariant * parameters)
        -:  284:{
        -:  285:  GError *error;
        -:  286:  gboolean res;
        -:  287:  GList *ui;
        -:  288:  gint num;
        -:  289:
    #####:  290:  GST_SWITCH_CONTROLLER_LOCK_UIS (controller);
    #####:  291:  g_assert (parameters);
    #####:  292:  g_variant_ref_sink (parameters);
        -:  293:
    #####:  294:  for (ui = controller->uis, num = 0; ui; ui = g_list_next (ui)) {
    #####:  295:    error = NULL;
    #####:  296:    res = g_dbus_connection_emit_signal (G_DBUS_CONNECTION (ui->data), NULL,    /* destination_bus_name */
        -:  297:        SWITCH_UI_OBJECT_PATH, SWITCH_UI_OBJECT_NAME,
        -:  298:        signame, parameters, &error);
        -:  299:
    #####:  300:    if (!res) {
    #####:  301:      ERROR ("emit: (%d) %s", num, error->message);
        -:  302:    } else {
    #####:  303:      ++num;
        -:  304:    }
        -:  305:  }
        -:  306:  /*
        -:  307:     INFO ("emit: %s (%d/%d)", signame, num, g_list_length (controller->uis));
        -:  308:   */
    #####:  309:  g_variant_unref (parameters);
        -:  310:
    #####:  311:  GST_SWITCH_CONTROLLER_UNLOCK_UIS (controller);
    #####:  312:}
        -:  313:
        -:  314:/**
        -:  315: * @brief Invoked to cleanup when a connected client is closed.
        -:  316: * @memberof GstSwitchController
        -:  317: */
        -:  318:static void
    #####:  319:gst_switch_controller_on_connection_closed (GDBusConnection * connection,
        -:  320:    gboolean vanished, GError * error, gpointer user_data)
        -:  321:{
    #####:  322:  GstSwitchController *controller = GST_SWITCH_CONTROLLER (user_data);
        -:  323:
        -:  324:  (void) controller;
        -:  325:
    #####:  326:  if (error) {
    #####:  327:    WARN ("close: %s", error->message);
    #####:  328:    g_error_free (error);
        -:  329:  }
        -:  330:
    #####:  331:  g_object_unref (connection);
    #####:  332:  GST_SWITCH_CONTROLLER_LOCK_UIS (controller);
    #####:  333:  controller->uis = g_list_remove (controller->uis, connection);
    #####:  334:  GST_SWITCH_CONTROLLER_UNLOCK_UIS (controller);
        -:  335:
    #####:  336:  INFO ("closed: %p, %d (%d uis)", connection, vanished,
        -:  337:      g_list_length (controller->uis));
    #####:  338:}
        -:  339:
        -:  340:static GVariant *gst_switch_controller_call_client (GstSwitchController *
        -:  341:    controller, GDBusConnection * connection, gint role,
        -:  342:    const gchar * method_name, GVariant * parameters,
        -:  343:    const GVariantType * reply_type);
        -:  344:
        -:  345:typedef struct
        -:  346:{
        -:  347:  GDBusConnection *connection;
        -:  348:  GstSwitchController *controller;
        -:  349:} GstSwitchAddNewClientParams;
        -:  350:
        -:  351:static gboolean
    #####:  352:gst_switch_controller_add_new_client (GstSwitchAddNewClientParams * params)
        -:  353:{
    #####:  354:  GDBusConnection *connection = params->connection;
    #####:  355:  GstSwitchController *controller = params->controller;
    #####:  356:  gint role = CLIENT_ROLE_NONE;
        -:  357:  {
    #####:  358:    gint tests[] = { CLIENT_ROLE_UI, CLIENT_ROLE_CAPTURE, };
    #####:  359:    GVariant *parameters = NULL, *res = NULL;
    #####:  360:    int n = 0;
    #####:  361:    for (; n < sizeof (tests); ++n) {
    #####:  362:      role = CLIENT_ROLE_NONE;
    #####:  363:      parameters = g_variant_new ("()");
    #####:  364:      res = gst_switch_controller_call_client (controller,
        -:  365:          connection, tests[n], "role", parameters, G_VARIANT_TYPE ("(i)"));
    #####:  366:      if (res) {
    #####:  367:        g_variant_get (res, "(i)", &role);
    #####:  368:        g_variant_unref (res);
    #####:  369:        break;
        -:  370:      }
        -:  371:    }
        -:  372:  }
        -:  373:
    #####:  374:  switch (role) {
        -:  375:    case CLIENT_ROLE_UI:
    #####:  376:      GST_SWITCH_CONTROLLER_LOCK_UIS (controller);
    #####:  377:      controller->uis = g_list_append (controller->uis, connection);
    #####:  378:      GST_SWITCH_CONTROLLER_UNLOCK_UIS (controller);
    #####:  379:      break;
        -:  380:    case CLIENT_ROLE_CAPTURE:
    #####:  381:      GST_SWITCH_CONTROLLER_LOCK_CAPTURES (controller);
    #####:  382:      controller->captures = g_list_append (controller->captures, connection);
    #####:  383:      GST_SWITCH_CONTROLLER_UNLOCK_CAPTURES (controller);
    #####:  384:      break;
        -:  385:    default:
    #####:  386:      g_object_unref (connection);
    #####:  387:      ERROR ("unknown role: %d", role);
    #####:  388:      break;
        -:  389:  }
        -:  390:
    #####:  391:  g_free (params);
        -:  392:
        -:  393:  /* Return FALSE for one-shot */
    #####:  394:  return FALSE;
        -:  395:}
        -:  396:
        -:  397:/**
        -:  398: * @brief Invoked when a new incomming client connection is established.
        -:  399: * @memberof GstSwitchController
        -:  400: */
        -:  401:static gboolean
    #####:  402:gst_switch_controller_on_new_connection (GDBusServer * server,
        -:  403:    GDBusConnection * connection, gpointer user_data)
        -:  404:{
    #####:  405:  GstSwitchController *controller = GST_SWITCH_CONTROLLER (user_data);
    #####:  406:  GstSwitchAddNewClientParams *params = NULL;
    #####:  407:  guint register_id = 0;
    #####:  408:  GError *error = NULL;
        -:  409:
        -:  410:  //INFO ("new-connection...");
        -:  411:
    #####:  412:  register_id = g_dbus_connection_register_object (connection, SWITCH_CONTROLLER_OBJECT_PATH, introspection_data->interfaces[0], &gst_switch_controller_interface_vtable, controller,   /* user_data */
        -:  413:      NULL,                     /* user_data_free_func */
        -:  414:      &error);
        -:  415:
    #####:  416:  if (register_id <= 0 || error != NULL) {
    #####:  417:    ERROR ("failed to register controller: %s", error->message);
    #####:  418:    return TRUE;
        -:  419:  }
        -:  420:
        -:  421:  /*
        -:  422:     INFO ("registered: %d, %s, %s", register_id,
        -:  423:     SWITCH_CONTROLLER_OBJECT_PATH,
        -:  424:     introspection_data->interfaces[0]->name);
        -:  425:   */
        -:  426:
    #####:  427:  g_signal_connect (connection, "closed",
        -:  428:      G_CALLBACK (gst_switch_controller_on_connection_closed), controller);
        -:  429:
    #####:  430:  params = g_new0 (GstSwitchAddNewClientParams, 1);
    #####:  431:  params->controller = controller;
    #####:  432:  params->connection = connection;
    #####:  433:  g_object_ref (connection);
        -:  434:
    #####:  435:  g_timeout_add (500, (GSourceFunc) gst_switch_controller_add_new_client,
        -:  436:      params);
    #####:  437:  return TRUE;
        -:  438:}
        -:  439:
        -:  440:/**
        -:  441: * @brief Authorizing new dbus connection.
        -:  442: * @memberof GstSwitchController
        -:  443: */
        -:  444:static gboolean
    #####:  445:gst_switch_controller_authorize_authenticated_peer (GDBusAuthObserver *
        -:  446:    observer,
        -:  447:    GIOStream * stream, GCredentials * credentials, gpointer user_data)
        -:  448:{
    #####:  449:  INFO ("authorize: %s", g_credentials_to_string (credentials));
    #####:  450:  return TRUE;
        -:  451:}
        -:  452:
        -:  453:/**
        -:  454: * @brief Initializing the GstSwitchController.
        -:  455: * @memberof GstSwitchController
        -:  456: * @see GObject
        -:  457: */
        -:  458:static void
    #####:  459:gst_switch_controller_init (GstSwitchController * controller)
        -:  460:{
    #####:  461:  gchar *guid = g_dbus_generate_guid ();
    #####:  462:  GDBusServerFlags flags = G_DBUS_SERVER_FLAGS_NONE;
        -:  463:  GDBusAuthObserver *auth_observer;
    #####:  464:  GError *error = NULL;
        -:  465:
    #####:  466:  g_mutex_init (&controller->uis_lock);
    #####:  467:  g_mutex_init (&controller->captures_lock);
    #####:  468:  controller->uis = NULL;
    #####:  469:  controller->captures = NULL;
        -:  470:
    #####:  471:  flags |= G_DBUS_SERVER_FLAGS_RUN_IN_THREAD;
    #####:  472:  flags |= G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS;
        -:  473:
    #####:  474:  auth_observer = g_dbus_auth_observer_new ();
    #####:  475:  controller->bus_server = g_dbus_server_new_sync (SWITCH_CONTROLLER_ADDRESS, flags, guid, auth_observer, NULL, /* GCancellable */
        -:  476:      &error);
        -:  477:
    #####:  478:  g_free (guid);
        -:  479:
    #####:  480:  if (controller->bus_server == NULL)
    #####:  481:    goto error_new_server;
        -:  482:
    #####:  483:  INFO ("Controller is listening at: %s",
        -:  484:      g_dbus_server_get_client_address (controller->bus_server));
        -:  485:
    #####:  486:  g_signal_connect (controller->bus_server, "new-connection",
        -:  487:      G_CALLBACK (gst_switch_controller_on_new_connection), controller);
        -:  488:
    #####:  489:  g_signal_connect (auth_observer, "authorize-authenticated-peer",
        -:  490:      G_CALLBACK
        -:  491:      (gst_switch_controller_authorize_authenticated_peer), controller);
        -:  492:
    #####:  493:  g_dbus_server_start (controller->bus_server);
        -:  494:
    #####:  495:  g_object_unref (auth_observer);
        -:  496:
        -:  497:  // TODO: singleton object
        -:  498:  return;
        -:  499:
        -:  500:  /* Errors Handling */
        -:  501:error_new_server:
        -:  502:  {
    #####:  503:    if (error)
    #####:  504:      ERROR ("%s", error->message);
        -:  505:    return;
        -:  506:  }
        -:  507:}
        -:  508:
        -:  509:/**
        -:  510: * @brief Destroying the GstSwitchController.
        -:  511: * @memberof GstSwitchController
        -:  512: * @see GObject
        -:  513: */
        -:  514:static void
    #####:  515:gst_switch_controller_finalize (GstSwitchController * controller)
        -:  516:{
    #####:  517:  INFO ("gst_switch_controller finalized");
    #####:  518:  if (controller->bus_server) {
    #####:  519:    g_dbus_server_stop (controller->bus_server);
    #####:  520:    g_assert (!g_dbus_server_is_active (controller->bus_server));
    #####:  521:    g_object_unref (controller->bus_server);
    #####:  522:    controller->bus_server = NULL;
        -:  523:  }
        -:  524:
    #####:  525:  g_mutex_clear (&controller->uis_lock);
    #####:  526:  g_mutex_clear (&controller->captures_lock);
        -:  527:
    #####:  528:  if (G_OBJECT_CLASS (gst_switch_controller_parent_class)->finalize)
    #####:  529:    (*G_OBJECT_CLASS (gst_switch_controller_parent_class)->finalize)
    #####:  530:        (G_OBJECT (controller));
    #####:  531:}
        -:  532:
        -:  533:/**
        -:  534: * @brief Check if the controller is valid.
        -:  535: * @param controller the GstSwitchController instance
        -:  536: * @return TRUE is the controller is valid connected to the dbus server
        -:  537: * @memberof GstSwitchController
        -:  538: */
        -:  539:gboolean
    #####:  540:gst_switch_controller_is_valid (GstSwitchController * controller)
        -:  541:{
    #####:  542:  gboolean valid = FALSE;
    #####:  543:  if (controller->bus_server) {
    #####:  544:    valid = TRUE;
        -:  545:  }
    #####:  546:  return valid;
        -:  547:}
        -:  548:
        -:  549:/**
        -:  550: * @brief Invoke a remote method on a connected client.
        -:  551: * @memberof GstSwitchController
        -:  552: */
        -:  553:static GVariant *
    #####:  554:gst_switch_controller_call_client (GstSwitchController * controller,
        -:  555:    GDBusConnection * connection, gint role, const gchar * method_name,
        -:  556:    GVariant * parameters, const GVariantType * reply_type)
        -:  557:{
    #####:  558:  GVariant *value = NULL;
    #####:  559:  GError *error = NULL;
        -:  560:
        -:  561:  /*
        -:  562:     INFO ("calling: %s/%s", SWITCH_CONTROLLER_OBJECT_NAME, method_name);
        -:  563:   */
        -:  564:
    #####:  565:  const char *path = "";
    #####:  566:  const char *name = "";
    #####:  567:  switch (role) {
        -:  568:    case CLIENT_ROLE_UI:
    #####:  569:      path = SWITCH_UI_OBJECT_PATH;
    #####:  570:      name = SWITCH_UI_OBJECT_NAME;
    #####:  571:      break;
        -:  572:    case CLIENT_ROLE_CAPTURE:
    #####:  573:      path = SWITCH_CAPTURE_OBJECT_PATH;
    #####:  574:      name = SWITCH_CAPTURE_OBJECT_NAME;
    #####:  575:      break;
        -:  576:  }
        -:  577:
    #####:  578:  value = g_dbus_connection_call_sync (connection, NULL,        /* bus_name */
        -:  579:      path, name, method_name, parameters, reply_type, G_DBUS_CALL_FLAGS_NONE, 5000,    /* timeout_msec */
        -:  580:      NULL /* TODO: cancellable */ ,
        -:  581:      &error);
        -:  582:
    #####:  583:  if (error != NULL)
    #####:  584:    goto error_call_sync;
        -:  585:
    #####:  586:  return value;
        -:  587:
        -:  588:  /* ERRORS */
        -:  589:error_call_sync:
        -:  590:  {
    #####:  591:    ERROR ("%s (%s)", error->message, method_name);
    #####:  592:    g_error_free (error);
    #####:  593:    if (value)
    #####:  594:      g_variant_unref (value);
    #####:  595:    return NULL;
        -:  596:  }
        -:  597:}
        -:  598:
        -:  599:/**
        -:  600: * @brief Invoke a remote method on all connected clients.
        -:  601: * @memberof GstSwitchController
        -:  602: */
        -:  603:static void
    #####:  604:gst_switch_controller_call_clients (GstSwitchController * controller,
        -:  605:    gint role, const gchar * method_name,
        -:  606:    GVariant * parameters, const GVariantType * reply_type)
        -:  607:{
        -:  608:  GDBusConnection *connection;
        -:  609:  GVariant *value;
    #####:  610:  GList *ui, *clients = NULL;
        -:  611:
    #####:  612:  g_variant_ref_sink (parameters);
        -:  613:
    #####:  614:  switch (role) {
        -:  615:    case CLIENT_ROLE_UI:
    #####:  616:      GST_SWITCH_CONTROLLER_LOCK_UIS (controller);
    #####:  617:      clients = controller->uis;
    #####:  618:      break;
        -:  619:    case CLIENT_ROLE_CAPTURE:
    #####:  620:      GST_SWITCH_CONTROLLER_LOCK_CAPTURES (controller);
    #####:  621:      clients = controller->captures;
    #####:  622:      break;
        -:  623:  }
        -:  624:
    #####:  625:  if (clients == NULL) {
    #####:  626:    WARN ("%s: no connections", method_name);
    #####:  627:    goto out;
        -:  628:  }
        -:  629:
    #####:  630:  for (ui = clients; ui;) {
    #####:  631:    connection = G_DBUS_CONNECTION (ui->data);
    #####:  632:    if (g_dbus_connection_is_closed (connection)) {
    #####:  633:      INFO ("UI closed: %p", connection);
    #####:  634:      ui = g_list_next (ui);
    #####:  635:      g_object_unref (connection);
    #####:  636:      clients = g_list_remove (clients, connection);
    #####:  637:      continue;
        -:  638:    }
        -:  639:
    #####:  640:    value = gst_switch_controller_call_client (controller,
        -:  641:        connection, role, method_name, parameters, reply_type);
    #####:  642:    if (value) {
        -:  643:      // ...
    #####:  644:      g_variant_unref (value);
        -:  645:    }
        -:  646:
    #####:  647:    ui = g_list_next (ui);
        -:  648:  }
        -:  649:
        -:  650:out:
    #####:  651:  g_variant_unref (parameters);
        -:  652:
    #####:  653:  switch (role) {
        -:  654:    case CLIENT_ROLE_UI:
    #####:  655:      controller->uis = clients;
    #####:  656:      GST_SWITCH_CONTROLLER_UNLOCK_UIS (controller);
    #####:  657:      break;
        -:  658:    case CLIENT_ROLE_CAPTURE:
    #####:  659:      controller->captures = clients;
    #####:  660:      GST_SWITCH_CONTROLLER_UNLOCK_CAPTURES (controller);
    #####:  661:      break;
        -:  662:  }
    #####:  663:}
        -:  664:
        -:  665:/**
        -:  666: * Convenient wrapper method for calling remoting method "set_audio_port"
        -:  667: * on all clients.
        -:  668: * @memberof GstSwitchController
        -:  669: */
        -:  670:static void
    #####:  671:gst_switch_controller_set_ui_audio_port (GstSwitchController * controller,
        -:  672:    gint port)
        -:  673:{
    #####:  674:  gst_switch_controller_call_clients (controller, CLIENT_ROLE_UI,
        -:  675:      "set_audio_port", g_variant_new ("(i)", port), G_VARIANT_TYPE ("()"));
    #####:  676:}
        -:  677:
        -:  678:/**
        -:  679: * Convenient wrapper for calling remoting method "set_compose_port" on
        -:  680: * all clients.
        -:  681: * @memberof GstSwitchController
        -:  682: */
        -:  683:static void
    #####:  684:gst_switch_controller_set_ui_compose_port (GstSwitchController * controller,
        -:  685:    gint port)
        -:  686:{
    #####:  687:  gst_switch_controller_call_clients (controller, CLIENT_ROLE_UI,
        -:  688:      "set_compose_port", g_variant_new ("(i)", port), G_VARIANT_TYPE ("()"));
    #####:  689:}
        -:  690:
        -:  691:/**
        -:  692: * @memberof GstSwitchController
        -:  693: * Convenient wrapper for calling remoting method "set_encode_port" on all
        -:  694: * clients.
        -:  695: */
        -:  696:static void
    #####:  697:gst_switch_controller_set_ui_encode_port (GstSwitchController * controller,
        -:  698:    gint port)
        -:  699:{
    #####:  700:  gst_switch_controller_call_clients (controller, CLIENT_ROLE_UI,
        -:  701:      "set_encode_port", g_variant_new ("(i)", port), G_VARIANT_TYPE ("()"));
    #####:  702:}
        -:  703:
        -:  704:/**
        -:  705: * @memberof GstSwitchController
        -:  706: * 
        -:  707: * Convenient wrapper for calling remoting method "add_preview_port" on all
        -:  708: * clients.
        -:  709: */
        -:  710:static void
    #####:  711:gst_switch_controller_add_ui_preview_port (GstSwitchController * controller,
        -:  712:    gint port, gint serve, gint type)
        -:  713:{
    #####:  714:  gst_switch_controller_call_clients (controller, CLIENT_ROLE_UI,
        -:  715:      "add_preview_port", g_variant_new ("(iii)", port, serve, type),
        -:  716:      G_VARIANT_TYPE ("()"));
    #####:  717:}
        -:  718:
        -:  719:/**
        -:  720: * @memberof GstSwitchController
        -:  721: *
        -:  722: * Fetching a GstSwitchController object's property.
        -:  723: *
        -:  724: * @see GObject
        -:  725: */
        -:  726:static void
    #####:  727:gst_switch_controller_get_property (GstSwitchController * controller,
        -:  728:    guint prop_id, GValue * value, GParamSpec * pspec)
        -:  729:{
        -:  730:  switch (prop_id) {
        -:  731:    default:
    #####:  732:      G_OBJECT_WARN_INVALID_PROPERTY_ID (G_OBJECT (controller), prop_id, pspec);
    #####:  733:      break;
        -:  734:  }
    #####:  735:}
        -:  736:
        -:  737:/**
        -:  738: * @memberof GstSwitchController
        -:  739: *
        -:  740: * Setting a GstSwitchController object's property.
        -:  741: *
        -:  742: * @see GObject.
        -:  743: */
        -:  744:static void
    #####:  745:gst_switch_controller_set_property (GstSwitchController * controller,
        -:  746:    guint prop_id, const GValue * value, GParamSpec * pspec)
        -:  747:{
        -:  748:  switch (prop_id) {
        -:  749:    default:
    #####:  750:      G_OBJECT_WARN_INVALID_PROPERTY_ID (G_OBJECT (controller), prop_id, pspec);
    #####:  751:      break;
        -:  752:  }
    #####:  753:}
        -:  754:
        -:  755:/**
        -:  756: * @memberof GstSwitchController
        -:  757: * @param controller the GstSwitchController instance
        -:  758: * @param port the port number
        -:  759: *
        -:  760: *  Tell the audio port to the clients.
        -:  761: */
        -:  762:void
    #####:  763:gst_switch_controller_tell_audio_port (GstSwitchController * controller,
        -:  764:    gint port)
        -:  765:{
    #####:  766:  gst_switch_controller_emit_ui_signal (controller, "audio_port",
        -:  767:      g_variant_new ("(i)", port));
    #####:  768:  gst_switch_controller_set_ui_audio_port (controller, port);
    #####:  769:}
        -:  770:
        -:  771:/**
        -:  772: * @memberof GstSwitchController
        -:  773: * @param controller the GstSwitchController instance
        -:  774: * @param port the port number
        -:  775: *
        -:  776: *  Tell the compose port to the clients.
        -:  777: */
        -:  778:void
    #####:  779:gst_switch_controller_tell_compose_port (GstSwitchController * controller,
        -:  780:    gint port)
        -:  781:{
    #####:  782:  gst_switch_controller_emit_ui_signal (controller, "compose_port",
        -:  783:      g_variant_new ("(i)", port));
    #####:  784:  gst_switch_controller_set_ui_compose_port (controller, port);
    #####:  785:}
        -:  786:
        -:  787:/**
        -:  788: *  @memberof GstSwitchController
        -:  789: *  @param controller the GstSwitchController instance
        -:  790: *  @param port the port number
        -:  791: *
        -:  792: *  Tell the encode port to the clients.
        -:  793: */
        -:  794:void
    #####:  795:gst_switch_controller_tell_encode_port (GstSwitchController * controller,
        -:  796:    gint port)
        -:  797:{
    #####:  798:  gst_switch_controller_emit_ui_signal (controller, "encode_port",
        -:  799:      g_variant_new ("(i)", port));
    #####:  800:  gst_switch_controller_set_ui_encode_port (controller, port);
    #####:  801:}
        -:  802:
        -:  803:/**
        -:  804: *  @memberof GstSwitchController
        -:  805: *  @param controller the GstSwitchController instance
        -:  806: *  @param port the port number
        -:  807: *  @param serve value of GstSwitchServeStreamType
        -:  808: *  @param type value of GstCaseType
        -:  809: *
        -:  810: *  Tell the preview port to the clients.
        -:  811: */
        -:  812:void
    #####:  813:gst_switch_controller_tell_preview_port (GstSwitchController * controller,
        -:  814:    gint port, gint serve, gint type)
        -:  815:{
    #####:  816:  gst_switch_controller_emit_ui_signal (controller, "preview_port",
        -:  817:      g_variant_new ("(iii)", port, serve, type));
    #####:  818:  gst_switch_controller_add_ui_preview_port (controller, port, serve, type);
    #####:  819:}
        -:  820:
        -:  821:/**
        -:  822: *  @memberof GstSwitchController
        -:  823: *  @param controller the GstSwitchController instance
        -:  824: *  @param mode the new mode changed
        -:  825: *
        -:  826: *  Tell the clients that new composite mode is online.
        -:  827: */
        -:  828:void
    #####:  829:gst_switch_controller_tell_new_mode_onlne (GstSwitchController * controller,
        -:  830:    gint mode)
        -:  831:{
    #####:  832:  gst_switch_controller_call_clients (controller, CLIENT_ROLE_UI,
        -:  833:      "new_mode_online", g_variant_new ("(i)", mode), G_VARIANT_TYPE ("()"));
    #####:  834:}
        -:  835:
        -:  836:gboolean
    #####:  837:gst_switch_controller_select_face (GstSwitchController * controller,
        -:  838:    gint x, gint y)
        -:  839:{
        -:  840:  //INFO ("click: %d, %d", x, y);
    #####:  841:  gst_switch_controller_call_clients (controller, CLIENT_ROLE_CAPTURE,
        -:  842:      "select_face", g_variant_new ("(ii)", x, y), G_VARIANT_TYPE ("()"));
    #####:  843:  return TRUE;
        -:  844:}
        -:  845:
        -:  846:void
    #####:  847:gst_switch_controller_show_face_marker (GstSwitchController * controller,
        -:  848:    GVariant * faces)
        -:  849:{
    #####:  850:  GVariant *v = g_variant_new_tuple (&faces, 1);
    #####:  851:  gst_switch_controller_call_clients (controller, CLIENT_ROLE_UI,
        -:  852:      "show_face_marker", v, G_VARIANT_TYPE ("()"));
    #####:  853:}
        -:  854:
        -:  855:void
    #####:  856:gst_switch_controller_show_track_marker (GstSwitchController * controller,
        -:  857:    GVariant * faces)
        -:  858:{
    #####:  859:  GVariant *v = g_variant_new_tuple (&faces, 1);
    #####:  860:  gst_switch_controller_call_clients (controller, CLIENT_ROLE_UI,
        -:  861:      "show_track_marker", v, G_VARIANT_TYPE ("()"));
    #####:  862:}
        -:  863:
        -:  864:/**
        -:  865: * @memberof GstSwitchController
        -:  866: *  
        -:  867: * Remoting method stub of "get_compose_port".
        -:  868: */
        -:  869:static GVariant *
    #####:  870:gst_switch_controller__get_compose_port (GstSwitchController * controller,
        -:  871:    GDBusConnection * connection, GVariant * parameters)
        -:  872:{
    #####:  873:  gint port = 0;
    #####:  874:  if (controller->server) {
    #####:  875:    port = gst_switch_server_get_composite_sink_port (controller->server);
        -:  876:  }
    #####:  877:  return g_variant_new ("(i)", port);
        -:  878:}
        -:  879:
        -:  880:/**
        -:  881: * @memberof GstSwitchController
        -:  882: *
        -:  883: * Remoting method stub of "get_encode_port".
        -:  884: */
        -:  885:static GVariant *
    #####:  886:gst_switch_controller__get_encode_port (GstSwitchController * controller,
        -:  887:    GDBusConnection * connection, GVariant * parameters)
        -:  888:{
    #####:  889:  gint port = 0;
    #####:  890:  if (controller->server) {
    #####:  891:    port = gst_switch_server_get_encode_sink_port (controller->server);
        -:  892:  }
    #####:  893:  return g_variant_new ("(i)", port);
        -:  894:}
        -:  895:
        -:  896:/**
        -:  897: * @memberof GstSwitchController
        -:  898: *
        -:  899: * Remoting method stub of "get_audio_port".
        -:  900: */
        -:  901:static GVariant *
    #####:  902:gst_switch_controller__get_audio_port (GstSwitchController * controller,
        -:  903:    GDBusConnection * connection, GVariant * parameters)
        -:  904:{
    #####:  905:  gint port = 0;
    #####:  906:  if (controller->server) {
    #####:  907:    port = gst_switch_server_get_audio_sink_port (controller->server);
        -:  908:  }
    #####:  909:  return g_variant_new ("(i)", port);
        -:  910:}
        -:  911:
        -:  912:/**
        -:  913: * @memberof GstSwitchController
        -:  914: *
        -:  915: * Remoting method stub of "get_preview_ports".
        -:  916: */
        -:  917:static GVariant *
    #####:  918:gst_switch_controller__get_preview_ports (GstSwitchController * controller,
        -:  919:    GDBusConnection * connection, GVariant * parameters)
        -:  920:{
    #####:  921:  GVariant *result = NULL;
    #####:  922:  if (controller->server) {
    #####:  923:    GArray *serves = NULL, *types = NULL;
    #####:  924:    GArray *ports =
    #####:  925:        gst_switch_server_get_preview_sink_ports (controller->server, &serves,
        -:  926:        &types);
        -:  927:    int n;
        -:  928:    GVariantBuilder *builder;
        -:  929:    GVariant *value;
        -:  930:    gchar *res;
        -:  931:
    #####:  932:    builder = g_variant_builder_new (G_VARIANT_TYPE ("a(iii)"));
    #####:  933:    for (n = 0; n < ports->len; ++n) {
    #####:  934:      g_variant_builder_add (builder, "(iii)",
    #####:  935:          g_array_index (ports, gint, n),
    #####:  936:          g_array_index (serves, gint, n), g_array_index (types, gint, n));
        -:  937:    }
    #####:  938:    value = g_variant_builder_end (builder);
        -:  939:    //result = g_variant_new_tuple (&value, 1);
    #####:  940:    res = g_variant_print (value, FALSE);
    #####:  941:    result = g_variant_new ("(s)", res);
        -:  942:
        -:  943:    /*
        -:  944:       INFO ("value: %s (%d)", g_variant_get_type_string (value),
        -:  945:       g_variant_n_children (value));
        -:  946:       INFO ("result: %s, %s", g_variant_get_type_string (result), res);
        -:  947:     */
        -:  948:
    #####:  949:    g_free (res);
    #####:  950:    g_array_free (ports, TRUE);
    #####:  951:    g_array_free (types, TRUE);
        -:  952:  }
    #####:  953:  return result;
        -:  954:}
        -:  955:
        -:  956:/**
        -:  957: * @memberof GstSwitchController
        -:  958: *
        -:  959: * Remoting method stub of "set_composite_mode".
        -:  960: */
        -:  961:static GVariant *
    #####:  962:gst_switch_controller__set_composite_mode (GstSwitchController * controller,
        -:  963:    GDBusConnection * connection, GVariant * parameters)
        -:  964:{
    #####:  965:  GVariant *result = NULL;
    #####:  966:  gboolean ok = FALSE;
        -:  967:  gint mode;
    #####:  968:  g_variant_get (parameters, "(i)", &mode);
    #####:  969:  if (controller->server) {
    #####:  970:    ok = gst_switch_server_set_composite_mode (controller->server, mode);
    #####:  971:    result = g_variant_new ("(b)", ok);
        -:  972:  }
    #####:  973:  return result;
        -:  974:}
        -:  975:
        -:  976:/**
        -:  977: * @memberof GstSwitchController
        -:  978: *
        -:  979: * Remoting method stub of "new_record".
        -:  980: */
        -:  981:static GVariant *
    #####:  982:gst_switch_controller__new_record (GstSwitchController * controller,
        -:  983:    GDBusConnection * connection, GVariant * parameters)
        -:  984:{
    #####:  985:  GVariant *result = NULL;
    #####:  986:  gboolean ok = FALSE;
    #####:  987:  if (controller->server) {
    #####:  988:    ok = gst_switch_server_new_record (controller->server);
    #####:  989:    result = g_variant_new ("(b)", ok);
        -:  990:  }
    #####:  991:  return result;
        -:  992:}
        -:  993:
        -:  994:/**
        -:  995: * @memberof GstSwitchController
        -:  996: *
        -:  997: * Remoting method stub of "adjust_pip".
        -:  998: */
        -:  999:static GVariant *
    #####: 1000:gst_switch_controller__adjust_pip (GstSwitchController * controller,
        -: 1001:    GDBusConnection * connection, GVariant * parameters)
        -: 1002:{
    #####: 1003:  GVariant *result = NULL;
        -: 1004:  gint dx, dy, dw, dh;
    #####: 1005:  guint res = 0;
    #####: 1006:  g_variant_get (parameters, "(iiii)", &dx, &dy, &dw, &dh);
    #####: 1007:  if (controller->server) {
    #####: 1008:    res = gst_switch_server_adjust_pip (controller->server, dx, dy, dw, dh);
    #####: 1009:    result = g_variant_new ("(u)", res);
        -: 1010:  }
    #####: 1011:  return result;
        -: 1012:}
        -: 1013:
        -: 1014:/**
        -: 1015: * @memberof GstSwitchController
        -: 1016: *
        -: 1017: * Remoting method stub of "switch".
        -: 1018: */
        -: 1019:static GVariant *
    #####: 1020:gst_switch_controller__switch (GstSwitchController * controller,
        -: 1021:    GDBusConnection * connection, GVariant * parameters)
        -: 1022:{
    #####: 1023:  GVariant *result = NULL;
        -: 1024:  gint channel, port;
    #####: 1025:  gboolean ok = FALSE;
    #####: 1026:  g_variant_get (parameters, "(ii)", &channel, &port);
    #####: 1027:  if (controller->server) {
    #####: 1028:    ok = gst_switch_server_switch (controller->server, channel, port);
    #####: 1029:    result = g_variant_new ("(b)", ok);
        -: 1030:  }
    #####: 1031:  return result;
        -: 1032:}
        -: 1033:
        -: 1034:/**
        -: 1035: * @memberof GstSwitchController
        -: 1036: *
        -: 1037: * Remoting method stub of "click_video".
        -: 1038: */
        -: 1039:static GVariant *
    #####: 1040:gst_switch_controller__click_video (GstSwitchController * controller,
        -: 1041:    GDBusConnection * connection, GVariant * parameters)
        -: 1042:{
    #####: 1043:  GVariant *result = NULL;
    #####: 1044:  gboolean ok = FALSE;
        -: 1045:  gint x, y, vw, vh;
    #####: 1046:  g_variant_get (parameters, "(iiii)", &x, &y, &vw, &vh);
    #####: 1047:  if (controller->server) {
    #####: 1048:    ok = gst_switch_server_click_video (controller->server, x, y, vw, vh);
    #####: 1049:    result = g_variant_new ("(b)", ok);
        -: 1050:  }
    #####: 1051:  return result;
        -: 1052:}
        -: 1053:
        -: 1054:/**
        -: 1055: * @memberof GstSwitchController
        -: 1056: *
        -: 1057: * Remoting method stub of "click_video".
        -: 1058: */
        -: 1059:static GVariant *
    #####: 1060:gst_switch_controller__mark_face (GstSwitchController * controller,
        -: 1061:    GDBusConnection * connection, GVariant * parameters)
        -: 1062:{
    #####: 1063:  GVariant *result = NULL;
        -: 1064:  //gint size = g_variant_n_children (parameters);
    #####: 1065:  if (controller->server) {
    #####: 1066:    gst_switch_server_mark_face (controller->server,
        -: 1067:        g_variant_get_child_value (parameters, 0), FALSE);
        -: 1068:  }
    #####: 1069:  return result;
        -: 1070:}
        -: 1071:
        -: 1072:static GVariant *
    #####: 1073:gst_switch_controller__mark_tracking (GstSwitchController * controller,
        -: 1074:    GDBusConnection * connection, GVariant * parameters)
        -: 1075:{
    #####: 1076:  GVariant *result = NULL;
        -: 1077:  //gint size = g_variant_n_children (parameters);
    #####: 1078:  if (controller->server) {
    #####: 1079:    gst_switch_server_mark_face (controller->server,
        -: 1080:        g_variant_get_child_value (parameters, 0), TRUE);
        -: 1081:  }
    #####: 1082:  return result;
        -: 1083:}
        -: 1084:
        -: 1085:/**
        -: 1086: *
        -: 1087: * Remoting method table of the gst-switch controller.
        -: 1088: */
        -: 1089:static MethodTableEntry gst_switch_controller_method_table[] = {
        -: 1090:  {"get_compose_port", (MethodFunc) gst_switch_controller__get_compose_port},
        -: 1091:  {"get_encode_port", (MethodFunc) gst_switch_controller__get_encode_port},
        -: 1092:  {"get_audio_port", (MethodFunc) gst_switch_controller__get_audio_port},
        -: 1093:  {"get_preview_ports",
        -: 1094:      (MethodFunc) gst_switch_controller__get_preview_ports},
        -: 1095:  {"set_composite_mode",
        -: 1096:      (MethodFunc) gst_switch_controller__set_composite_mode},
        -: 1097:  {"new_record", (MethodFunc) gst_switch_controller__new_record},
        -: 1098:  {"adjust_pip", (MethodFunc) gst_switch_controller__adjust_pip},
        -: 1099:  {"click_video", (MethodFunc) gst_switch_controller__click_video},
        -: 1100:  {"mark_face", (MethodFunc) gst_switch_controller__mark_face},
        -: 1101:  {"mark_tracking", (MethodFunc) gst_switch_controller__mark_tracking},
        -: 1102:  {"switch", (MethodFunc) gst_switch_controller__switch},
        -: 1103:  {NULL, NULL}
        -: 1104:};
        -: 1105:
        -: 1106:/**
        -: 1107: * @brief Initialize the GstSwitchControllerClass.
        -: 1108: * @param klass
        -: 1109: * @memberof GstSwitchControllerClass
        -: 1110: */
        -: 1111:static void
    #####: 1112:gst_switch_controller_class_init (GstSwitchControllerClass * klass)
        -: 1113:{
    #####: 1114:  GObjectClass *object_class = G_OBJECT_CLASS (klass);
        -: 1115:
    #####: 1116:  object_class->finalize = (GObjectFinalizeFunc) gst_switch_controller_finalize;
    #####: 1117:  object_class->get_property =
        -: 1118:      (GObjectGetPropertyFunc) gst_switch_controller_get_property;
    #####: 1119:  object_class->set_property =
        -: 1120:      (GObjectSetPropertyFunc) gst_switch_controller_set_property;
        -: 1121:
    #####: 1122:  klass->methods = g_hash_table_new (g_str_hash, g_str_equal);
        -: 1123:
    #####: 1124:  MethodTableEntry *entry = &gst_switch_controller_method_table[0];
    #####: 1125:  for (; entry->name && entry->func; ++entry) {
    #####: 1126:    g_hash_table_insert (klass->methods, (gpointer) entry->name,
    #####: 1127:        (gpointer) entry->func);
        -: 1128:  }
        -: 1129:
    #####: 1130:  introspection_data = g_dbus_node_info_new_for_xml (introspection_xml, NULL);
    #####: 1131:  g_assert (introspection_data != NULL);
    #####: 1132:}
